- name: "Install Minecraft Server"
  hosts: all 
  vars:
    apt_packages_list:
    - "openjdk-19-jre-headless"
    - "screen"
    - "ufw"
    - "vim"
  tasks:
    - name: "install minecraft server dependencies using apt"
      ansible.builtin.import_role:
        name: "install_package_w_apt"
      vars:
        package: "{{ item }}"
      loop: "{{ apt_packages_list }}"
      when: ansible_facts.pkg_mgr == "apt"

    - name: "install spiggot"
      ansible.builtin.import_role:
        name: "install spiggot"
          


        # TODO 
  #   - add public-key to authenticate as minecraft user or password.
  #     REQUIREMENTS: This playbook assumes, that the public_key/password to auth as ansible user is already installed.
  #                   It also assumes, that there is a user "ansible" with root rights to create a new user and install new packages"
  #   - add password to unzip in ansible-vault var file and refer to it to decrypt zip files
  #   - implement role to also set cronjob with @reboot sleep10; /usr/bin/screen -A -m -d -S minecraft /home/minecraft/minecraft-server/vanilla/ServerStart.sh
  #   - do a handler (what fits better) to stop and restart the server. So this playbook can also be used to update the existing plugins.
  #     for that, see notify handlers (notify, if the plugins zip has changed. Use the folder name with a date. if this folder name  does not exist, (like plugins-20-01-2024)
  #     then there is an update of plugins or a new install. in anyway: if the handler sees: "oh! minecraft is running, sop and start it ")
  #  
  